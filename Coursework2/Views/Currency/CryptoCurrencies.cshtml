@model CryptoCurrenciesListMetaData
@using Coursework2.Interfaces;
@using Coursework2.Models.CoinMarketCapApiModels;
@using System.Globalization;
@inject ICoinMarketCapFunctional _service;
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
</head>
<body>
    <div class="container align-content-center justify-content-center">

        <div>
            <h3>
                Today's Cryptocurrency Prices by Market Cap
            </h3>
        </div>

        <div class="crypto-button-container">
            <span class="crypto-button" id="openModalButton">
                <img src="~/Image/finish.png" alt="Finish" class="icon" />
                Select Currency
            </span>
            <span class="crypto-button" id="openModal2Button">
                <img src="~/Image/filter.png" alt="Filter" class="icon" />
                Filters
            </span>
        </div>
       
        <div class="crypto-button-container">
            <span class="crypto-button crypto-func" data-tags="bitcoin-ecosystem">🔥Bitcoin Ecosystem</span>
            <span class="crypto-button crypto-func" data-tags="ftx-bankruptcy-estate">🔥FTX Bankruptcy Estate</span>
            <span class="crypto-button crypto-func" data-tags="real-world-assets">🔥Real World Assets</span>
            <span class="crypto-button crypto-func" data-tags="telegram-bot">🔥Telegram Bot</span>
        </div>
        <!-- Модальне вікно -->
        <div id="myModal" class="modal">
            <div class="modal-content">
                <span class="close" data-modal="myModal">&times;</span>
                <div class="image-list">
                    <p class="group-label">FIAT CURRENCY</p>
                    <div class="currencies">
                        <div class="currency-item" data-value="USD" data-sign="$">
                            <img src="/Image/USD.png" class="currency-image" />
                            <div class="d-block">
                                <p class="currency-name">United States Dollar</p>
                                <p class="currency-sign">USD - $</p>
                            </div>
                        </div>
                        <div class="currency-item" data-value="EUR" data-sign="€">
                            <img src="/Image/EUR.png" class="currency-image" />
                            <div class="d-block">
                                <p class="currency-name">Euro</p>
                                <p class="currency-sign">EUR - €</p>
                            </div>
                        </div>
                        <div class="currency-item" data-value="UAH" data-sign="₴">
                            <img src="/Image/UAN.png" class="currency-image" />
                            <div class="d-block">
                                <p class="currency-name">Ukrainian Hryvnia</p>
                                <p class="currency-sign">UAH - ₴</p>
                            </div>
                        </div>
                        <div class="currency-item" data-value="BRL" data-sign="R$">
                            <img src="/Image/BRL.png" class="currency-image" />
                            <div class="d-block">
                                <p class="currency-name">Brazilian Real</p>
                                <p class="currency-sign">BRL - R$</p>
                            </div>
                        </div>
                    </div>
                    <p class="group-label">CRYPTO CURRENCY</p>
                    <div class="currencies">
                        <div class="currency-item" data-value="BTC" data-sign="BTC">
                            <img src="/Image/BTC.png" class="currency-image" />
                            <div class="d-block">
                                <p class="currency-name">Bitcoin</p>
                                <p class="currency-sign">BTC</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Модальне вікно -->
        <div id="myModal2" class="modal">
            <div class="modal-content">
                <span class="close" data-modal="myModal2">&times;</span>
                <p class="group-label">More Filters</p>
                <hr class="group-divider" />
                <div class="filter-group">
                    <p>Cryptocurrency Type</p>
                    <button class="toggle-button">&#9660</button>
                </div>
                <div class="filter-content">
                    <form id="cryptoForm" method="post">
                        <input type="radio" id="all" name="cryptocurrency_type" value="all">
                        <label for="all">All cryptocurrencies</label><br>
                        <input type="radio" id="coins" name="cryptocurrency_type" value="coins">
                        <label for="coins">Coins</label><br>
                        <input type="radio" id="tokens" name="cryptocurrency_type" value="tokens">
                        <label for="tokens">Tokens</label>
                    </form>
                </div>

                <div class="filter-group">
                    <p>Market Cap Range</p>
                    <button class="toggle-button">&#9660</button>
                </div>
                <div class="filter-content">
                    <p style="font-size:larger">Market Cap Range</p>
                    <div class="content-content">
                        <input type="number" name="marketCapRange" id="minMarketCap" placeholder="Min" />
                        <p>to</p>
                        <input type="number" name="marketCapRange" id="maxMarketCap" placeholder="Max" />
                    </div>
                </div>

                <div class="filter-group">
                    <p>Price</p>
                    <button class="toggle-button">&#9660</button>
                </div>
                <div class="filter-content">
                    <p style="font-size:larger">Price</p>
                    <div class="content-content">
                        <input type="number" name="price" id="minprice" placeholder="Min" />
                        <p>to</p>
                        <input type="number" name="price" id="maxprice" placeholder="Max" />
                    </div>
                </div>

                <div class="filter-group">
                    <p>Volume 24h Range</p>
                    <button class="toggle-button">&#9660</button>
                </div>
                <div class="filter-content">
                    <p style="font-size:larger">Volume 24h Range</p>
                    <div class="content-content">
                        <input type="number" name="volume_24h" id="minvolume_24h" placeholder="Min" />
                        <p>to</p>
                        <input type="number" name="volume_24h" id="maxvolume_24h" placeholder="Max" />
                    </div>
                </div>

                <div class="filter-group">
                    <p>Circulating Supply Range</p>
                    <button class="toggle-button">&#9660</button>
                </div>
                <div class="filter-content">
                    <p style="font-size:larger">Circulating Supply Range</p>
                    <div class="content-content">
                        <input type="number" name="circulating_supply" id="circulating_supply_min" placeholder="Min" />
                        <p>to</p>
                        <input type="number" name="circulating_supply" id="circulating_supply_max" placeholder="Max" />
                    </div>
                </div>

                <div class="filter-group">
                    <p>Persent Change 24h</p>
                    <button class="toggle-button">&#9660</button>
                </div>
                <div class="filter-content">
                    <p style="font-size:larger">Persent Change 24h</p>
                    <div class="content-content">
                        <input type="number" name="percent_change" id="percent_change_24h_min" placeholder="Min" min="-100" />
                        <p>to</p>
                        <input type="number" name="percent_change" id="percent_change_24h_max" placeholder="Max" min="-100" />
                    </div>
                </div>
                <button id="applyFilter">Apply Filter</button>
            </div>
        </div>
        <div>
            <!-- Render the CryptoCurrenciesListMetaData partial view here -->
            @Html.Partial("CryptoCurrenciesList", Model)
        </div>
    </div>
</body>
</html>
<style>
    .star:hover {
        color: yellow;
        cursor: pointer;
    }
    .active_star{
        color:yellow;
        font-weight:800;
    }
    /* Style for price increase */
    /* Style for price increase */
    .price-up {
        color: green; /* Change text color for price increase */
        transition: color 3s ease-in-out;
        font-weight:500;
    }

    /* Style for price decrease */
    .price-down {
        color: red; /* Change text color for price decrease */
        transition: color 3s ease-in-out;
        font-weight: 500;
    }

    

  
</style>
<script type="text/javascript">

    // Отримуємо необхідні елементи DOM
    var modal = document.getElementById("myModal");
    var modal2 = document.getElementById("myModal2");
    var closeModalButtons = document.getElementsByClassName("close");
    var currencyImages = document.querySelectorAll(".currency-item");
    
    var minMarketCapInput = document.getElementById("minMarketCap");
    var maxMarketCapInput = document.getElementById("maxMarketCap");

    var minPriceInput = document.getElementById("minprice");
    var maxPriceInput = document.getElementById("maxprice");

    var minvolume_24hInput = document.getElementById("minvolume_24h");
    var maxvolume_24hInput = document.getElementById("maxvolume_24h");

    var circulating_supply_minInput = document.getElementById("circulating_supply_min");
    var circulating_supply_maxInput = document.getElementById("circulating_supply_max");

    var minpercent_changeInput = document.getElementById("percent_change_24h_min");
    var maxpercent_changeInput = document.getElementById("percent_change_24h_max");

    var applyFilterButton = document.getElementById("applyFilter");

    var bitcoinEcoQuery = document.getElementById("bitcoinEcoQuery");


    for (var i = 0; i < closeModalButtons.length; i++) {
        closeModalButtons[i].addEventListener("click", function () {
            var modalId = this.getAttribute("data-modal");
            var modal = document.getElementById(modalId);
            modal.style.display = "none";
        });
    }
    // Відкриття модального вікна для вибору ціни
    openModalButton.onclick = function () {
        modal.style.display = "block";
    };

    // Відкриття модального вікна для фільтрів
    openModal2Button.onclick = function () {
        modal2.style.display = "block";
    };

    document.addEventListener('DOMContentLoaded', function () {
        // Знаходимо всі кнопки для зміни відображення блоків
        var toggleButtons = document.querySelectorAll('.toggle-button');

        // Додаємо обробник подій для кожної кнопки
        toggleButtons.forEach(function (button) {
            button.addEventListener('click', function () {
                // Знаходимо батьківський елемент (групу)
                var group = this.closest('.filter-group');

                // Знаходимо блок фільтра, який повинен бути відображений або прихований
                var filterContent = group.nextElementSibling;

                // Перевіряємо поточний стиль display блоку фільтра
                if (filterContent.style.display === 'block' || filterContent.style.display === '') {
                    filterContent.style.display = 'none';
                    this.innerHTML = '&#9660'; // Змінюємо текст кнопки на стрілочку вниз
                } else {
                    filterContent.style.display = 'block';
                    this.innerHTML = '&#9650'; // Змінюємо текст кнопки на стрілочку вверх
                }
            });
        });
    });

    // Об'єкт для зберігання параметрів
    var queryParams = {};
    var selectedSign = "$";

    var radioButtons = document.querySelectorAll('input[name="cryptocurrency_type"]');
    for (var i = 0; i < radioButtons.length; i++) {
        radioButtons[i].addEventListener("change", function () {
            var selectedCryptoType = document.querySelector('input[name="cryptocurrency_type"]:checked');
            if (selectedCryptoType) {
                // Додавання параметру до об'єкта queryParams
                if (queryParams.hasOwnProperty("cryptocurrency_type")) {
                    queryParams["cryptocurrency_type"] = selectedCryptoType.value;
                } else {
                    // Якщо параметр не існує, додайте його
                    queryParams["cryptocurrency_type"] = selectedCryptoType.value;
                }
                console.log(queryParams);
                sendAjaxRequest(selectedSign);
                modal2.style.display = "none";
            }
        });
    }

    currencyImages.forEach(function (image) {
        image.onclick = function () {
            var selectedValue = this.getAttribute("data-value");
            selectedSign = this.getAttribute("data-sign"); // Update the global variable

            // Додавання параметру до об'єкта queryParams
            if (queryParams.hasOwnProperty("convert")) {
                queryParams["convert"] = selectedValue;
            } else {
                // Якщо параметр не існує, додайте його
                queryParams["convert"] = selectedValue;
            }
            console.log(queryParams);
            // Відправлення запиту з поточними параметрами
            sendAjaxRequest(selectedSign); // Use the updated value
            modal.style.display = "none";
        };
    });
    var addToFavouriteBtn = document.querySelectorAll("#addtofavouritebtn");
    var stateMap = {}; // Об'єкт для зберігання стану кожної зірочки

    for (var i = 0; i < addToFavouriteBtn.length; i++) {
        var btn = addToFavouriteBtn[i];
        var cryptoId = btn.getAttribute("data-id");

        // Ініціалізуємо стан на початку
        stateMap[cryptoId] = false;

        btn.addEventListener("click", function () {
            if (!stateMap[cryptoId]) {
                this.textContent = "★";
                stateMap[cryptoId] = true;
                this.classList.add("active_star");
            } else {
                this.textContent = "☆";
                stateMap[cryptoId] = false;
                this.classList.remove("active_star");
            }
        });
    }


    applyFilterButton.addEventListener("click", function () {
        var minMarketCap = parseFloat(minMarketCapInput.value) || 0;
        var maxMarketCap = parseFloat(maxMarketCapInput.value) || Number.POSITIVE_INFINITY;

        var volume_24h_min = parseFloat(minvolume_24hInput.value) || 0;
        var volume_24h_max = parseFloat(maxvolume_24hInput.value) || Number.POSITIVE_INFINITY;

        var minPrice = parseFloat(minPriceInput.value) || 0;
        var maxPrice = parseFloat(maxPriceInput.value) || Number.POSITIVE_INFINITY;

        var circulating_supply_min = parseFloat(circulating_supply_minInput.value) || 0;
        var circulating_supply_max = parseFloat(circulating_supply_maxInput.value) || Number.POSITIVE_INFINITY;

        var percent_change_24h_min = parseFloat(minpercent_changeInput.value) || -100;
        var percent_change_24h_max = parseFloat(maxpercent_changeInput.value) || Number.POSITIVE_INFINITY;

        // Додавання параметрів до об'єкта queryParams
        if (queryParams.hasOwnProperty("price_min") && queryParams.hasOwnProperty("price_max")) {
            // Якщо обидва параметри вже існують, оновлюємо їх значення
            queryParams["price_min"] = minPrice;
            queryParams["price_max"] = maxPrice;
        } else {
            // Якщо хоча б один з параметрів не існує, додаємо обидва параметри
            queryParams["price_min"] = minPrice;
            queryParams["price_max"] = maxPrice;
        }

        // Додавання параметрів до об'єкта queryParams
        if (queryParams.hasOwnProperty("market_cap_min") && queryParams.hasOwnProperty("market_cap_max")) {
            // Якщо обидва параметри вже існують, оновлюємо їх значення
            queryParams["market_cap_min"] = minMarketCap;
            queryParams["market_cap_max"] = maxMarketCap;
        } else {
            // Якщо хоча б один з параметрів не існує, додаємо обидва параметри
            queryParams["market_cap_min"] = minMarketCap;
            queryParams["market_cap_max"] = maxMarketCap;
        }

        // Додавання параметрів до об'єкта queryParams
        if (queryParams.hasOwnProperty("volume_24h_min") && queryParams.hasOwnProperty("volume_24h_max")) {
            // Якщо обидва параметри вже існують, оновлюємо їх значення
            queryParams["volume_24h_min"] = volume_24h_min;
            queryParams["volume_24h_max"] = volume_24h_max;
        } else {
            // Якщо хоча б один з параметрів не існує, додаємо обидва параметри
            queryParams["volume_24h_min"] = volume_24h_min;
            queryParams["volume_24h_max"] = volume_24h_max;
        }

        // Додавання параметрів до об'єкта queryParams
        if (queryParams.hasOwnProperty("circulating_supply_min") && queryParams.hasOwnProperty("circulating_supply_max")) {
            // Якщо обидва параметри вже існують, оновлюємо їх значення
            queryParams["circulating_supply_min"] = circulating_supply_min;
            queryParams["circulating_supply_max"] = circulating_supply_max;
        } else {
            // Якщо хоча б один з параметрів не існує, додаємо обидва параметри
            queryParams["circulating_supply_min"] = circulating_supply_min;
            queryParams["circulating_supply_max"] = circulating_supply_max;
        }

        // Додавання параметрів до об'єкта queryParams
        if (queryParams.hasOwnProperty("percent_change_24h_min") && queryParams.hasOwnProperty("percent_change_24h_max")) {
            // Якщо обидва параметри вже існують, оновлюємо їх значення
            queryParams["percent_change_24h_min"] = percent_change_24h_min;
            queryParams["percent_change_24h_max"] = percent_change_24h_max;
        } else {
            // Якщо хоча б один з параметрів не існує, додаємо обидва параметри
            queryParams["percent_change_24h_min"] = percent_change_24h_min;
            queryParams["percent_change_24h_max"] = percent_change_24h_max;
        }

        console.log(queryParams);
        // Відправлення запиту з поточними параметрами
        sendAjaxRequest(selectedSign);
        modal2.style.display = "none";


    });

    var cryptoButtons = document.querySelectorAll(".crypto-func");

    // Додаємо обробник подій для кожної кнопки
    cryptoButtons.forEach(function (button) {
        button.addEventListener("click", function () {
            // Отримуємо значення параметру tags з атрибуту data
            var tags = button.getAttribute("data-tags");
             if (selectedSign == null)
            selectedSign = "$"
            // Виконуємо AJAX-запит і передаємо параметр tags
            $.ajax({
                type: "POST",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                url: "/Currency/GetBitcoinEcoSystem?tags=" + tags,
                success: function (data) {
                    cryptoTableBody.innerHTML = "";
                    updateTable(data, selectedSign);
                },
                error: function () {
                    alert("Помилка при завантаженні даних.");
                }
            });
        });
    });

    // Функція для відправки AJAX-запиту
    function sendAjaxRequest(selectedSign) {
        $.ajax({
            type: "POST",
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            url: "/Currency/GetFilteredResult?queryParams=" + JSON.stringify(queryParams),
            success: function (data) {
                cryptoTableBody.innerHTML = "";
                updateTable(data, selectedSign);
            },
            error: function () {
                alert("Помилка при завантаженні даних.");
            }
        });
    }
</script>


